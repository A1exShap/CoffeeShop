@page "/Products"
@using CoffeeStore.UI.Data.Models
@using System.Text.Json

@inject HttpClient HttpClient

<h3>Products</h3>

<table class="table">
    <thead>
        <tr>
            <th>Product</th>
            <th>Type</th>
            <th>Price</th>
        </tr>
    </thead>    
    <tbody>
        @foreach (var product in _products.OrderBy(prod => prod.Name))
        {
            <tr>
                <td>@product.Name</td>
                <td>@_types[product.ProductType]</td>
                <td>@product.SellingPrice</td>
            </tr>
        }

    </tbody>
</table>

@code 
{
    private IEnumerable<IProductItem> _products = Enumerable.Empty<IProductItem>();

    private Dictionary<Guid, string> _types = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        using var typesResponse = await HttpClient.GetAsync("/Properties/types");
        var content = await typesResponse.Content.ReadAsStringAsync();
        
        _types = JsonSerializer.Deserialize<Dictionary<Guid, string>>(content) ?? new Dictionary<Guid, string>();

        using var productsResponse = await HttpClient.GetAsync("/Products/default/all");
        content = await productsResponse.Content.ReadAsStringAsync();

        _products = JsonSerializer.Deserialize<ProductItem[]>(content) ?? Array.Empty<ProductItem>();
    }
}
